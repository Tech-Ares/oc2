name: Build, Push Docker & Deploy ECS with Terraform

on:
  push:
    branches:
      - dev
      - staging
      - main # 通常對應 Production 環境

env:
  AWS_REGION: ap-northeast-1 # 你的 AWS 區域
  ECR_REPO_NAME: my-app      # ECR 儲存庫名稱

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          # 這裡使用 GitHub Secrets 中的 AWS 憑證
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          # 【面試討論點】對於真正的多帳戶部署，這裡通常會使用 OIDC (OpenID Connect)
          # 來假設一個在目標 AWS 帳戶中的 IAM 角色，而不是直接使用 Access Key/Secret Key。
          # 範例 (假設你已經在 Dev, Staging, Prod 帳戶中創建了名為 'GitHubActionsDeployRole' 的 IAM 角色):
          # role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          # role-session-name: GitHubActionsSession

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          IMAGE_TAG=${{ github.sha }} # 使用 Git SHA 作為映像標籤，確保唯一性
          docker build -t $ECR_REPO_NAME:$IMAGE_TAG .
          docker tag $ECR_REPO_NAME:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/${ECR_REPO_NAME}:$IMAGE_TAG

      - name: Push Docker image to ECR
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker push ${{ steps.login-ecr.outputs.registry }}/${ECR_REPO_NAME}:$IMAGE_TAG

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7 # 指定 Terraform 版本

      - name: Set Terraform Environment Directory
        id: set_tf_env_dir
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          # 根據分支名稱設定 Terraform 工作目錄
          if [[ "$BRANCH_NAME" == "dev" ]]; then
            echo "TF_WORKING_DIR=terraform/dev" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "staging" ]]; then
            echo "TF_WORKING_DIR=terraform/staging" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "main" ]]; then
            echo "TF_WORKING_DIR=terraform/prod" >> $GITHUB_ENV # 'main' 分支通常對應 Production
          else
            echo "Invalid branch for deployment: $BRANCH_NAME"
            exit 1
          fi

      - name: Initialize Terraform
        run: terraform init # 不再需要 -backend-config，因為 backend.tf 已經在工作目錄中定義
        working-directory: ${{ env.TF_WORKING_DIR }} # 使用動態工作目錄

      - name: Select or create Terraform workspace
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          terraform workspace select $BRANCH_NAME || terraform workspace new $BRANCH_NAME
        working-directory: ${{ env.TF_WORKING_DIR }} # 使用動態工作目錄

      - name: Terraform plan
        run: |
          terraform plan \
          -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -var="image_tag=${{ github.sha }}"
        working-directory: ${{ env.TF_WORKING_DIR }} # 使用動態工作目錄

      - name: Terraform apply
        run: |
          terraform apply -auto-approve \
          -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -var="image_tag=${{ github.sha }}"
        working-directory: ${{ env.TF_WORKING_DIR }} # 使用動態工作目錄
